{
  "service": {
    "service": "reto-aws-lambda-crud",
    "serviceObject": {
      "name": "reto-aws-lambda-crud"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "lambdaHashingVersion": "20201221",
      "region": "us-east-1",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:448885973878:table/Person"
        }
      ],
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Access-Control-Allow-Origin",
            "Authorization"
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AddPersonLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-addPerson"
            }
          },
          "GetPersonsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-getPersons"
            }
          },
          "GetStarWarsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-getStarWars"
            }
          },
          "SwaggerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-swagger"
            }
          },
          "OpenapiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-openapi"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "reto-aws-lambda-crud",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-aws-lambda-crud-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-aws-lambda-crud-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "reto-aws-lambda-crud",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AddPersonLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                "S3Key": "serverless/reto-aws-lambda-crud/dev/1731634062624-2024-11-15T01:27:42.624Z/reto-aws-lambda-crud.zip"
              },
              "Handler": "src/domain/interfaces/controllers/PersonController.addPerson",
              "Runtime": "nodejs18.x",
              "FunctionName": "reto-aws-lambda-crud-dev-addPerson",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddPersonLogGroup"
            ]
          },
          "GetPersonsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                "S3Key": "serverless/reto-aws-lambda-crud/dev/1731634062624-2024-11-15T01:27:42.624Z/reto-aws-lambda-crud.zip"
              },
              "Handler": "src/domain/interfaces/controllers/PersonController.getPersons",
              "Runtime": "nodejs18.x",
              "FunctionName": "reto-aws-lambda-crud-dev-getPersons",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPersonsLogGroup"
            ]
          },
          "GetStarWarsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                "S3Key": "serverless/reto-aws-lambda-crud/dev/1731634062624-2024-11-15T01:27:42.624Z/reto-aws-lambda-crud.zip"
              },
              "Handler": "src/domain/interfaces/controllers/StarWarsController.getStarWars",
              "Runtime": "nodejs18.x",
              "FunctionName": "reto-aws-lambda-crud-dev-getStarWars",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetStarWarsLogGroup"
            ]
          },
          "SwaggerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                "S3Key": "serverless/reto-aws-lambda-crud/dev/1731634062624-2024-11-15T01:27:42.624Z/reto-aws-lambda-crud.zip"
              },
              "Handler": "src/swagger.swagger",
              "Runtime": "nodejs18.x",
              "FunctionName": "reto-aws-lambda-crud-dev-swagger",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SwaggerLogGroup"
            ]
          },
          "OpenapiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                "S3Key": "serverless/reto-aws-lambda-crud/dev/1731634062624-2024-11-15T01:27:42.624Z/reto-aws-lambda-crud.zip"
              },
              "Handler": "src/openapi.openapi",
              "Runtime": "nodejs18.x",
              "FunctionName": "reto-aws-lambda-crud-dev-openapi",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OpenapiLogGroup"
            ]
          },
          "AddPersonLambdaVersionbDNrVMxaBku6IM4qJQJChMM1avT6JNYvRCtc2dn0CdA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddPersonLambdaFunction"
              },
              "CodeSha256": "zQj4G1QgWcJdIqWB2fyzp//PGOBrI0CTK95li0ngN0Y="
            }
          },
          "GetPersonsLambdaVersion47p3E6ieKWa3NDv0dLD7TTEgmYPXo7VlP5oj3V2fl8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPersonsLambdaFunction"
              },
              "CodeSha256": "zQj4G1QgWcJdIqWB2fyzp//PGOBrI0CTK95li0ngN0Y="
            }
          },
          "GetStarWarsLambdaVersionzU2ChPHznqLgFltaY9Ib9IpckhhtrjN58cVH6mGyw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetStarWarsLambdaFunction"
              },
              "CodeSha256": "zQj4G1QgWcJdIqWB2fyzp//PGOBrI0CTK95li0ngN0Y="
            }
          },
          "SwaggerLambdaVersionkpNvRaN6JEGtsOz6H2Kvqlk61h0qKY46Pnv33kS5Z0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerLambdaFunction"
              },
              "CodeSha256": "zQj4G1QgWcJdIqWB2fyzp//PGOBrI0CTK95li0ngN0Y="
            }
          },
          "OpenapiLambdaVersionBf6PWRf1BJGi3o47CR3mnk9OvUtzcswpI9I3g5lkQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OpenapiLambdaFunction"
              },
              "CodeSha256": "zQj4G1QgWcJdIqWB2fyzp//PGOBrI0CTK95li0ngN0Y="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-reto-aws-lambda-crud",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceSwagger": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "swagger",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOpenapiyml": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "openapi.yml",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSwaggerGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSwagger"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SwaggerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SwaggerLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOpenapiymlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOpenapiyml"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "OpenapiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "OpenapiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1731634054963": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodSwaggerGet",
              "ApiGatewayMethodOpenapiymlGet"
            ]
          },
          "SwaggerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "OpenapiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OpenapiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-reto-aws-lambda-crud",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "Access-Control-Allow-Origin",
                  "Authorization"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST",
                  "GET"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "AddPersonLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddPersonLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAddPerson": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AddPersonLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostPerson": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /person",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAddPerson"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAddPerson"
          },
          "GetPersonsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPersonsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetPersons": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetPersonsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetPersons": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /persons",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetPersons"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetPersons"
          },
          "GetStarWarsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetStarWarsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetStarWars": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetStarWarsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetstarwars": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /getStarWars",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetStarWars"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetStarWars"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-ServerlessDeploymentBucketName"
            }
          },
          "AddPersonLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddPersonLambdaVersionbDNrVMxaBku6IM4qJQJChMM1avT6JNYvRCtc2dn0CdA"
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-AddPersonLambdaFunctionQualifiedArn"
            }
          },
          "GetPersonsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPersonsLambdaVersion47p3E6ieKWa3NDv0dLD7TTEgmYPXo7VlP5oj3V2fl8"
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-GetPersonsLambdaFunctionQualifiedArn"
            }
          },
          "GetStarWarsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetStarWarsLambdaVersionzU2ChPHznqLgFltaY9Ib9IpckhhtrjN58cVH6mGyw"
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-GetStarWarsLambdaFunctionQualifiedArn"
            }
          },
          "SwaggerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerLambdaVersionkpNvRaN6JEGtsOz6H2Kvqlk61h0qKY46Pnv33kS5Z0"
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-SwaggerLambdaFunctionQualifiedArn"
            }
          },
          "OpenapiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OpenapiLambdaVersionBf6PWRf1BJGi3o47CR3mnk9OvUtzcswpI9I3g5lkQ"
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-OpenapiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-ServiceEndpoint"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-reto-aws-lambda-crud-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "api": {
          "info": {
            "title": "My API",
            "version": "1.0.0",
            "description": "API description"
          },
          "servers": [
            {
              "url": "https://api.example.com"
            }
          ]
        }
      }
    },
    "plugins": [
      "serverless-openapi-documentation",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "addPerson": {
        "handler": "src/domain/interfaces/controllers/PersonController.addPerson",
        "events": [
          {
            "httpApi": {
              "path": "/person",
              "method": "post"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/person"
          }
        ],
        "requestBody": {
          "description": "Person object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nationalIdentity": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "eyeColor": {
                    "type": "string"
                  },
                  "dateBirth": {
                    "type": "string",
                    "format": "date"
                  }
                }
              }
            }
          }
        },
        "name": "reto-aws-lambda-crud-dev-addPerson",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AddPersonLambdaVersionbDNrVMxaBku6IM4qJQJChMM1avT6JNYvRCtc2dn0CdA"
      },
      "getPersons": {
        "handler": "src/domain/interfaces/controllers/PersonController.getPersons",
        "events": [
          {
            "httpApi": {
              "path": "/persons",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/persons"
          }
        ],
        "name": "reto-aws-lambda-crud-dev-getPersons",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetPersonsLambdaVersion47p3E6ieKWa3NDv0dLD7TTEgmYPXo7VlP5oj3V2fl8"
      },
      "getStarWars": {
        "handler": "src/domain/interfaces/controllers/StarWarsController.getStarWars",
        "events": [
          {
            "httpApi": {
              "path": "/getStarWars",
              "method": "get"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/getStarWars"
          }
        ],
        "name": "reto-aws-lambda-crud-dev-getStarWars",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetStarWarsLambdaVersionzU2ChPHznqLgFltaY9Ib9IpckhhtrjN58cVH6mGyw"
      },
      "swagger": {
        "handler": "src/swagger.swagger",
        "events": [
          {
            "http": {
              "path": "swagger",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-aws-lambda-crud-dev-swagger",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SwaggerLambdaVersionkpNvRaN6JEGtsOz6H2Kvqlk61h0qKY46Pnv33kS5Z0"
      },
      "openapi": {
        "handler": "src/openapi.openapi",
        "events": [
          {
            "http": {
              "path": "openapi.yml",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "reto-aws-lambda-crud-dev-openapi",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OpenapiLambdaVersionBf6PWRf1BJGi3o47CR3mnk9OvUtzcswpI9I3g5lkQ"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "reto-aws-lambda-crud",
      "frameworkVersion": "4.4.7",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\security\\Pictures\\ebvua\\reto-tecnico-jramirez-aws\\.serverless\\reto-aws-lambda-crud.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/reto-aws-lambda-crud/dev/1731634062624-2024-11-15T01:27:42.624Z",
    "artifact": "reto-aws-lambda-crud.zip"
  }
}