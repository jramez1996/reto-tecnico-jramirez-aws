{
  "C:\\Users\\security\\Pictures\\ebvua\\reto-tecnico-jramirez-aws": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>"
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\security\\Pictures\\ebvua\\reto-tecnico-jramirez-aws",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "reto-aws-lambda-crud",
      "frameworkVersion": "4.4.7",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "lambdaHashingVersion": "20201221",
        "region": "us-east-1",
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": "arn:aws:dynamodb:us-east-1:448885973878:table/Person"
          }
        ],
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Access-Control-Allow-Origin",
              "Authorization"
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AddPersonLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-addPerson"
              }
            },
            "GetPersonsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-getPersons"
              }
            },
            "GetStarWarsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-getStarWars"
              }
            },
            "SwaggerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-swagger"
              }
            },
            "OpenapiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/reto-aws-lambda-crud-dev-openapi"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "reto-aws-lambda-crud",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-aws-lambda-crud-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/reto-aws-lambda-crud-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": "arn:aws:dynamodb:us-east-1:448885973878:table/Person"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "reto-aws-lambda-crud",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AddPersonLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                  "S3Key": "serverless/reto-aws-lambda-crud/dev/1731657272840-2024-11-15T07:54:32.840Z/reto-aws-lambda-crud.zip"
                },
                "Handler": "src/domain/interfaces/controllers/PersonController.addPersonHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "reto-aws-lambda-crud-dev-addPerson",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddPersonLogGroup"
              ]
            },
            "GetPersonsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                  "S3Key": "serverless/reto-aws-lambda-crud/dev/1731657272840-2024-11-15T07:54:32.840Z/reto-aws-lambda-crud.zip"
                },
                "Handler": "src/domain/interfaces/controllers/PersonController.getPersonsHandler",
                "Runtime": "nodejs18.x",
                "FunctionName": "reto-aws-lambda-crud-dev-getPersons",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPersonsLogGroup"
              ]
            },
            "GetStarWarsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                  "S3Key": "serverless/reto-aws-lambda-crud/dev/1731657272840-2024-11-15T07:54:32.840Z/reto-aws-lambda-crud.zip"
                },
                "Handler": "src/domain/interfaces/controllers/StarWarsController.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "reto-aws-lambda-crud-dev-getStarWars",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetStarWarsLogGroup"
              ]
            },
            "SwaggerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                  "S3Key": "serverless/reto-aws-lambda-crud/dev/1731657272840-2024-11-15T07:54:32.840Z/reto-aws-lambda-crud.zip"
                },
                "Handler": "src/swagger.swagger",
                "Runtime": "nodejs18.x",
                "FunctionName": "reto-aws-lambda-crud-dev-swagger",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SwaggerLogGroup"
              ]
            },
            "OpenapiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
                  "S3Key": "serverless/reto-aws-lambda-crud/dev/1731657272840-2024-11-15T07:54:32.840Z/reto-aws-lambda-crud.zip"
                },
                "Handler": "src/openapi.openapi",
                "Runtime": "nodejs18.x",
                "FunctionName": "reto-aws-lambda-crud-dev-openapi",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "OpenapiLogGroup"
              ]
            },
            "AddPersonLambdaVersion1CwRJEAZeCPLAt9ym4Et45yYAcoKaX3secVHGvQuyCk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddPersonLambdaFunction"
                },
                "CodeSha256": "6Cesw9WphquQcJ4qAswa3dj8AxXR/7UkwUUAsnB465g="
              }
            },
            "GetPersonsLambdaVersionWI7lUOaRhZHyWCHJDOAX57PWpbbFtr2ttdhbtGwqtZo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPersonsLambdaFunction"
                },
                "CodeSha256": "6Cesw9WphquQcJ4qAswa3dj8AxXR/7UkwUUAsnB465g="
              }
            },
            "GetStarWarsLambdaVersionBTDkEU0XPaoZrQaQw59EmlmtuNBDSmworLH2gPC3Kbo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetStarWarsLambdaFunction"
                },
                "CodeSha256": "6Cesw9WphquQcJ4qAswa3dj8AxXR/7UkwUUAsnB465g="
              }
            },
            "SwaggerLambdaVersiongIXPSRkVffXxHYfyD6CfFqJWZYIU2r2zIaaYjkIgqE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SwaggerLambdaFunction"
                },
                "CodeSha256": "6Cesw9WphquQcJ4qAswa3dj8AxXR/7UkwUUAsnB465g="
              }
            },
            "OpenapiLambdaVersiong8tWqaWUUgkvmaAJiEKtBTPQ0C5Cm5GTekBg5QUNS9o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "OpenapiLambdaFunction"
                },
                "CodeSha256": "6Cesw9WphquQcJ4qAswa3dj8AxXR/7UkwUUAsnB465g="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-reto-aws-lambda-crud",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceSwagger": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "swagger",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceOpenapiyml": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "openapi.yml",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodSwaggerGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceSwagger"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SwaggerLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "SwaggerLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodOpenapiymlGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceOpenapiyml"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "OpenapiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "OpenapiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1731657269377": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodSwaggerGet",
                "ApiGatewayMethodOpenapiymlGet"
              ]
            },
            "SwaggerLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SwaggerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "OpenapiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "OpenapiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-reto-aws-lambda-crud",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "Access-Control-Allow-Origin",
                    "Authorization"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "POST",
                    "GET"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "AddPersonLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddPersonLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAddPerson": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AddPersonLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostPerson": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /person",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAddPerson"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAddPerson"
            },
            "GetPersonsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPersonsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetPersons": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetPersonsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetPersons": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /persons",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetPersons"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetPersons"
            },
            "GetStarWarsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetStarWarsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetStarWars": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetStarWarsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetGetstarwars": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /getStarWars",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetStarWars"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetStarWars"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-ServerlessDeploymentBucketName"
              }
            },
            "AddPersonLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddPersonLambdaVersion1CwRJEAZeCPLAt9ym4Et45yYAcoKaX3secVHGvQuyCk"
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-AddPersonLambdaFunctionQualifiedArn"
              }
            },
            "GetPersonsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPersonsLambdaVersionWI7lUOaRhZHyWCHJDOAX57PWpbbFtr2ttdhbtGwqtZo"
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-GetPersonsLambdaFunctionQualifiedArn"
              }
            },
            "GetStarWarsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetStarWarsLambdaVersionBTDkEU0XPaoZrQaQw59EmlmtuNBDSmworLH2gPC3Kbo"
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-GetStarWarsLambdaFunctionQualifiedArn"
              }
            },
            "SwaggerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SwaggerLambdaVersiongIXPSRkVffXxHYfyD6CfFqJWZYIU2r2zIaaYjkIgqE"
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-SwaggerLambdaFunctionQualifiedArn"
              }
            },
            "OpenapiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "OpenapiLambdaVersiong8tWqaWUUgkvmaAJiEKtBTPQ0C5Cm5GTekBg5QUNS9o"
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-OpenapiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-ServiceEndpoint"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-reto-aws-lambda-crud-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "addPerson": {
          "handler": "src/domain/interfaces/controllers/PersonController.addPersonHandler",
          "events": [
            {
              "httpApi": {
                "path": "/person",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/person"
            }
          ],
          "requestBody": {
            "description": "Person object that needs to be added",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nationalIdentity": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "gender": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "eyeColor": {
                      "type": "string"
                    },
                    "dateBirth": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          },
          "name": "reto-aws-lambda-crud-dev-addPerson",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AddPersonLambdaVersion1CwRJEAZeCPLAt9ym4Et45yYAcoKaX3secVHGvQuyCk"
        },
        "getPersons": {
          "handler": "src/domain/interfaces/controllers/PersonController.getPersonsHandler",
          "events": [
            {
              "httpApi": {
                "path": "/persons",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/persons"
            }
          ],
          "name": "reto-aws-lambda-crud-dev-getPersons",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetPersonsLambdaVersionWI7lUOaRhZHyWCHJDOAX57PWpbbFtr2ttdhbtGwqtZo"
        },
        "getStarWars": {
          "handler": "src/domain/interfaces/controllers/StarWarsController.handler",
          "events": [
            {
              "httpApi": {
                "path": "/getStarWars",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/getStarWars"
            }
          ],
          "name": "reto-aws-lambda-crud-dev-getStarWars",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetStarWarsLambdaVersionBTDkEU0XPaoZrQaQw59EmlmtuNBDSmworLH2gPC3Kbo"
        },
        "swagger": {
          "handler": "src/swagger.swagger",
          "events": [
            {
              "http": {
                "path": "swagger",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "reto-aws-lambda-crud-dev-swagger",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "SwaggerLambdaVersiongIXPSRkVffXxHYfyD6CfFqJWZYIU2r2zIaaYjkIgqE"
        },
        "openapi": {
          "handler": "src/openapi.openapi",
          "events": [
            {
              "http": {
                "path": "openapi.yml",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "reto-aws-lambda-crud-dev-openapi",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "OpenapiLambdaVersiong8tWqaWUUgkvmaAJiEKtBTPQ0C5Cm5GTekBg5QUNS9o"
        }
      },
      "plugins": [
        "serverless-openapi-documentation",
        "serverless-offline"
      ],
      "custom": {
        "documentation": {
          "api": {
            "info": {
              "title": "My API",
              "version": "1.0.0",
              "description": "API description"
            },
            "servers": [
              {
                "url": "https://api.example.com"
              }
            ]
          }
        }
      }
    },
    "serviceRawFile": "service: reto-aws-lambda-crud\r\nframeworkVersion: '4.4.7'\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x\r\n  lambdaHashingVersion: '20201221'\r\n  region: us-east-1\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource:\r\n        - arn:aws:dynamodb:us-east-1:448885973878:table/Person\r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - '*'\r\n      allowedHeaders:\r\n        - Content-Type\r\n        - Access-Control-Allow-Origin\r\n        - Authorization\r\n\r\nfunctions:\r\n  addPerson:\r\n    handler: src/domain/interfaces/controllers/PersonController.addPersonHandler\r\n    events:\r\n      - httpApi:\r\n          path: /person\r\n          method: post\r\n    requestBody:\r\n      description: \"Person object that needs to be added\"\r\n      required: true\r\n      content:\r\n        application/json:\r\n          schema:\r\n            type: object\r\n            properties:\r\n              nationalIdentity:\r\n                type: string\r\n              name:\r\n                type: string\r\n              gender:\r\n                type: string\r\n              location:\r\n                type: string\r\n              eyeColor:\r\n                type: string\r\n              dateBirth:\r\n                type: string\r\n                format: date\r\n\r\n  getPersons:\r\n    handler: src/domain/interfaces/controllers/PersonController.getPersonsHandler\r\n    events:\r\n      - httpApi:\r\n          path: /persons\r\n          method: get\r\n\r\n  getStarWars:\r\n    handler: src/domain/interfaces/controllers/StarWarsController.handler\r\n    events:\r\n      - httpApi:\r\n          path: /getStarWars\r\n          method: get\r\n\r\n  swagger:\r\n    handler: src/swagger.swagger\r\n    events:\r\n      - http:\r\n          path: swagger\r\n          method: get\r\n\r\n  openapi:\r\n    handler: src/openapi.openapi\r\n    events:\r\n      - http:\r\n          path: openapi.yml\r\n          method: get\r\n\r\n \r\nplugins:\r\n  - serverless-openapi-documentation\r\n  - serverless-offline\r\n\r\ncustom:\r\n  documentation:\r\n    api:\r\n      info:\r\n        title: \"My API\"\r\n        version: \"1.0.0\"\r\n        description: \"API description\"\r\n      servers:\r\n        - url: \"https://api.example.com\"  # Cambia esto a la URL de tu API en producción\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "fe8f04d90b8b38ea4437f53f3cd075cc",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "28f4855c-a57b-40e1-b3e5-bf88a5b8ba0d",
    "orgName": "juanrs",
    "userId": "lP0jKC4sHD0wXFBGqB",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "juanrs",
    "subscription": null,
    "userEmail": "jramez54@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "448885973878",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "reto-aws-lambda-crud-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:448885973878:stack/reto-aws-lambda-crud-dev/ddccdc90-a326-11ef-aca4-129c20079efd",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:448885973878:stack/reto-aws-lambda-crud-dev/ddccdc90-a326-11ef-aca4-129c20079efd",
    "serviceProviderAwsCfStackCreated": "2024-11-15T07:54:39.822Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "SwaggerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:448885973878:function:reto-aws-lambda-crud-dev-swagger:139",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-aws-lambda-crud-dev-SwaggerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "OpenapiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:448885973878:function:reto-aws-lambda-crud-dev-openapi:138",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-aws-lambda-crud-dev-OpenapiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "2dzuhitru7",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-reto-aws-lambda-crud-dev-HttpApiId"
      },
      {
        "OutputKey": "AddPersonLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:448885973878:function:reto-aws-lambda-crud-dev-addPerson:147",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-aws-lambda-crud-dev-AddPersonLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPersonsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:448885973878:function:reto-aws-lambda-crud-dev-getPersons:146",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-aws-lambda-crud-dev-GetPersonsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetStarWarsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:448885973878:function:reto-aws-lambda-crud-dev-getStarWars:146",
        "Description": "Current Lambda function version",
        "ExportName": "sls-reto-aws-lambda-crud-dev-GetStarWarsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://fjd6o73rh6.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-reto-aws-lambda-crud-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-1ed89a6d-808d",
        "ExportName": "sls-reto-aws-lambda-crud-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://2dzuhitru7.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-reto-aws-lambda-crud-dev-HttpApiUrl"
      }
    ]
  }
}